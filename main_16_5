from fastapi import FastAPI, status, Body, HTTPException, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
from typing import List

app = FastAPI()
templates = Jinja2Templates(directory='templates')

users = []

def find_user(id):
    for user in users:
        if user.id == id:
            return user
    raise HTTPException(status_code=404, detail="User was not found")


class User(BaseModel):
    id: int = None
    username: str
    age: int

@app.get('/')
def get_all_user(request: Request) -> HTMLResponse:
    return templates.TemplateResponse('users.html', {'request': request, 'users': users})

@app.get('/user/{user_id}')
def get_user(user_id: int, request: Request) -> HTMLResponse:
    user = find_user((user_id))
    return templates.TemplateResponse('users.html', {'request': request, 'user': user})

@app.post('/user/{username}/{age}')
async  def create_user(username: str, age: int) -> User:
    if len(users) == 0:
        id = 1
    else:
        id = users[-1].id + 1
    user = User(id=id, username=username, age=age)
    users.append(user)
    return user

@app.put('/user/{user_id}/{username}/{age}')
async def update_user(user_id: int, username: str, age: int):
    user = find_user(user_id)
    user.username = username
    user.age = age
    return user

@app.delete('/user/{user_id}')
async def delete_user(user_id: int):
    user = find_user(user_id)
    users.remove(user)
    return users
